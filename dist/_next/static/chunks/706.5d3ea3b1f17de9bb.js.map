{"version":3,"file":"static/chunks/706.5d3ea3b1f17de9bb.js","mappings":"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","sources":["webpack://_N_E/./libs/bs-sdk/Emitter.ts","webpack://_N_E/./libs/bs-sdk/shared.ts","webpack://_N_E/./libs/bs-sdk/BsSdk.ts","webpack://_N_E/./libs/bs-sql/shared.ts","webpack://_N_E/./libs/bs-sql/BsSql.ts","webpack://_N_E/./libs/bs-sql/index.ts","webpack://_N_E/./utils/useQuery.ts","webpack://_N_E/./views/App/index.tsx","webpack://_N_E/./views/App/index.module.css","webpack://_N_E/<anon>"],"sourcesContent":["import { ParamsType } from \"./typestools\";\n\nexport class Emitter<CB extends (...args: any[]) => void> {\n  private events = new Set<CB>();\n  private lastEmitArgs: ParamsType<CB> | undefined;\n  constructor() {}\n\n  size() {\n    return this.events.size;\n  }\n\n  emitSync(...args: ParamsType<CB>) {\n    const p: void[] = [];\n    this.events.forEach((cb) => {\n      p.push(cb(...args));\n    });\n    return p;\n  }\n\n  emitLifeCycle(...args: ParamsType<CB>) {\n    this.lastEmitArgs = args;\n    return Promise.resolve().then(() => {\n      try {\n        this.emitSync(...args);\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  emit(...args: ParamsType<CB>) {\n    return Promise.resolve().then(() => {\n      try {\n        this.emitSync(...args);\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  on(cb: CB) {\n    if (this.lastEmitArgs) {\n      cb(...this.lastEmitArgs);\n    }\n    this.events.add(cb);\n    return () => {\n      this.off(cb);\n    };\n  }\n\n  wait() {\n    return new Promise<ParamsType<CB>>((resolve) => {\n      const cb = (...args: ParamsType<CB>) => {\n        resolve(args);\n        clear();\n      };\n      const clear = this.on(cb as CB);\n    });\n  }\n\n  off(cb: CB) {\n    this.events.delete(cb);\n  }\n\n  destroy() {\n    this.events.clear();\n  }\n}\n","\"use client\";\nimport {\n  FieldType,\n  type IFieldMeta,\n  type IOpenAttachment,\n  type IRecord,\n} from \"@lark-base-open/js-sdk\";\nimport { format } from \"date-fns\";\nimport { useEffect, useState } from \"react\";\n\nexport async function fileToIOpenAttachment(\n  base: any,\n  file: File\n): Promise<IOpenAttachment> {\n  const tokens = await base.batchUploadFile([file]);\n  return {\n    name: file.name,\n    size: file.size,\n    type: file.type,\n    token: tokens[0],\n    timeStamp: file.lastModified,\n  };\n}\n// function downloadFile(file: Blob | MediaSource) {\n//   const downloadLink = document.createElement(\"a\");\n//   downloadLink.href = URL.createObjectURL(file);\n//   downloadLink.download = file.name;\n//   downloadLink.click();\n// }\nexport function fileToURL(file: Blob) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = (error) => {\n      reject(error);\n    };\n    reader.readAsDataURL(file);\n  });\n}\nexport async function canvasToFile(\n  canvas: HTMLCanvasElement,\n  fileName: string,\n  fileType = \"image/png\"\n) {\n  // 获取Canvas上的图像数据（这里假设图像数据为DataURL）\n  // const imageDataURL = canvas.toDataURL(fileType);\n\n  // // 将DataURL转换为Blob对象\n  // const blob = dataURLToBlob(imageDataURL);\n\n  const blob: Blob = await new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob(\n      (blob) => {\n        if (!blob) return reject(new Error(\"canvas to blob error\"));\n        resolve(blob);\n      },\n      fileType,\n      1\n    );\n  });\n\n  // 创建File对象\n  const file = new File([blob], fileName, { type: fileType });\n\n  return file;\n}\n// 将DataURL转换为Blob对象的辅助函数\nfunction dataURLToBlob(dataURL: string) {\n  const byteString = atob(dataURL.split(\",\")[1]);\n  const mimeString = dataURL.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n  const arrayBuffer = new ArrayBuffer(byteString.length);\n  const uint8Array = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    uint8Array[i] = byteString.charCodeAt(i);\n  }\n  return new Blob([arrayBuffer], { type: mimeString });\n}\n\nexport function base64ToFile(\n  base64: string,\n  filename: string,\n  mimeType: string\n) {\n  const arr = base64.split(\",\");\n  const mime = arr[0].match(/:(.*?);/)![1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  // eslint-disable-next-line no-plusplus\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new File([u8arr], filename, { type: mimeType });\n}\nexport function downloadFile(file: File) {\n  const downloadLink = document.createElement(\"a\");\n  downloadLink.href = URL.createObjectURL(file);\n  downloadLink.download = file.name;\n  downloadLink.click();\n}\n\nexport function urlToFile(url: string, filename: string, mimeType?: string) {\n  return fetch(url)\n    .then((res) => res.blob())\n    .then(\n      (blob) => new File([blob], filename, { type: mimeType ?? blob.type })\n    );\n}\n\nexport function fileExt(file: string, isDot = true) {\n  const extIdx = file.lastIndexOf(\".\");\n  const [name, ext] =\n    extIdx === -1\n      ? [file, undefined]\n      : [file.slice(0, extIdx), file.slice(extIdx + 1)];\n  return [name, ext ? (isDot ? \".\" : \"\") + ext.toLowerCase() : undefined];\n}\n\nexport function smartFileSizeDisplay(b: number): string {\n  const kb = b / 1024;\n  if (kb < 1) {\n    return b + \"B\";\n  }\n  const mb = kb / 1024;\n  if (mb < 1) {\n    return kb.toFixed(2) + \"KB\";\n  }\n  const gb = mb / 1024;\n  if (gb < 1) {\n    return mb.toFixed(2) + \"MB\";\n  }\n  return gb.toFixed(2) + \"GB\";\n}\n\nexport function smartTimestampDisplay(timestamp: number): string {\n  const date = new Date(timestamp);\n  // const now = new Date();\n  // const diff = now.getTime() - date.getTime();\n  // if (diff < 1000) {\n  //   return \"刚刚\";\n  // }\n  // if (diff < 60 * 1000) {\n  //   return Math.floor(diff / 1000) + \"秒前\";\n  // }\n  // if (diff < 60 * 60 * 1000) {\n  //   return Math.floor(diff / 1000 / 60) + \"分钟前\";\n  // }\n  // if (diff < 24 * 60 * 60 * 1000) {\n  //   return Math.floor(diff / 1000 / 60 / 60) + \"小时前\";\n  // }\n  // if (diff < 7 * 24 * 60 * 60 * 1000) {\n  //   return Math.floor(diff / 1000 / 60 / 60 / 24) + \"天前\";\n  // }\n  return date.toLocaleString();\n}\n\nexport function copyText(url: string) {\n  const input = document.createElement(\"input\");\n  input.value = url;\n  document.body.appendChild(input);\n  input.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(input);\n}\n\nexport function splitFilename(url: string) {\n  const idx = url.lastIndexOf(\"/\");\n  const idx2 = url.lastIndexOf(\"?\");\n  const name = url.slice(idx + 1, idx2 === -1 ? undefined : idx2);\n  return name;\n}\n\nlet isInit = new Map();\nconst initState = (key: string, state: any) => {\n  if (isInit.has(key)) {\n    return isInit.get(key);\n  }\n  const saved = localStorage.getItem(key);\n  const init = saved ? JSON.parse(saved) : state;\n  isInit.set(key, init);\n  return init;\n};\n\nexport function useKeepState<T>(state: T, id = \"default\") {\n  const key = `keep-state-${id}`;\n  const [data, setData] = useState(initState(key, state));\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(data));\n  }, [data, key]);\n\n  return [data, setData] as const;\n}\n\nexport function useDynKeep<T>(state: T) {\n  const [data, setData] = useState(state);\n\n  useEffect(() => {\n    setData(state);\n  }, [state]);\n\n  const save = (id: string) => {\n    localStorage.setItem(id, JSON.stringify(data));\n  };\n\n  const load = (id: string) => {\n    const saved = localStorage.getItem(id);\n    if (saved) {\n      setData(JSON.parse(saved));\n    }\n  };\n\n  return [data, setData, load, save] as const;\n}\n\nexport function transDisplayRecord(fields: IFieldMeta[], record: IRecord) {\n  const obj: any = {};\n\n  fields.forEach((field) => {\n    const cell = record.fields[field.id] as any;\n\n    if (\n      field.type === FieldType.DateTime &&\n      \"dateFormat\" in field.property &&\n      cell\n    ) {\n      obj[field.id] = format(cell, field.property?.dateFormat);\n      obj[\"ts_\" + field.name] = cell;\n    } else if (field.type === FieldType.Url && cell) {\n      obj[field.id] = cell[0]?.link;\n    } else {\n      obj[field.id] =\n        typeof cell === \"object\"\n          ? cell?.text ??\n            cell\n              ?.map?.((item: any) => item?.text ?? item?.name)\n              .filter((item: any) => item)\n              .join(\",\")\n          : cell;\n    }\n    obj._raw_ = record.fields;\n  });\n  return obj;\n}\n\nexport function transFieldsMap(fields: IFieldMeta[]) {\n  const fieldsMapName: any = {};\n  const fieldsMapId: any = {};\n\n  fields.forEach((item) => {\n    fieldsMapId[item.id] = item.name;\n    fieldsMapName[item.name] = item.id;\n  });\n\n  return {\n    fieldsMapName,\n    fieldsMapId,\n  };\n}\n","import {\n  IEventCbCtx,\n  bitable,\n  Selection,\n  ITable,\n  IField,\n  IGetRecordsParams,\n  IRecord,\n  IFieldMeta,\n} from \"@lark-base-open/js-sdk\";\nimport { format } from \"date-fns\";\nimport { Emitter } from \"./Emitter\";\nimport { transDisplayRecord } from \"./shared\";\n\nexport type SelectionChangeEmitter = (event: IEventCbCtx<Selection>) => any;\nexport type InitEmitter = (sdk: BsSdk) => any;\n\nexport interface BIField extends IField {\n  name: string;\n}\n\nexport class BsSdk {\n  public readonly bitable = bitable;\n  public readonly base = bitable.base;\n  public activeTable: ITable | undefined;\n  // public readonly initEmitter = new Emitter<InitEmitter>();\n  public readonly emSelectionChange = new Emitter<SelectionChangeEmitter>();\n\n  constructor({\n    onSelectionChange = false,\n    immediatelySelectionChange = true,\n  } = {}) {\n    if (onSelectionChange) {\n      this.base.onSelectionChange(async (event) => {\n        this.activeTable = undefined;\n        this.emSelectionChange.emitLifeCycle(event);\n      });\n    }\n    if (immediatelySelectionChange && onSelectionChange) {\n      this.getSelection().then((selection) => {\n        this.emSelectionChange.emitSync({ data: selection });\n      });\n    }\n  }\n\n  async getRecordIds(table?: ITable) {\n    if (!table) table = await this.getActiveTable();\n    return await table.getRecordIdList();\n  }\n\n  async getRecordById(table: ITable, recordId: string) {\n    return await table.getRecordById(recordId);\n  }\n\n  async getActiveTable() {\n    if (this.activeTable) return this.activeTable;\n    this.activeTable = await bitable.base.getActiveTable();\n    return this.activeTable;\n  }\n\n  async getTableList() {\n    return await bitable.base.getTableList();\n  }\n\n  async getFieldList(table: ITable) {\n    const fieldList: BIField[] = await table.getFieldList();\n    for (let i = 0; i < fieldList.length; i++) {\n      const field = fieldList[i];\n      field.name = await field.getName();\n    }\n    return fieldList;\n  }\n\n  async getSelection(): Promise<Selection> {\n    return await bitable.base.getSelection();\n  }\n\n  async getSelectionQuery(selection: Partial<Selection>) {\n    const table = selection.tableId\n      ? await this.base.getTableById(selection.tableId)\n      : undefined;\n    const result = {\n      table: table,\n      view: selection.viewId\n        ? await table?.getViewById(selection.viewId)\n        : undefined,\n      field: selection.fieldId\n        ? await table?.getFieldById(selection.fieldId)\n        : undefined,\n      record: selection.recordId\n        ? await table?.getRecordById(selection.recordId)\n        : undefined,\n    };\n    return result;\n  }\n\n  async getSelection2({\n    viewId = false,\n    fieldId = false,\n    recordId = false,\n  } = {}) {\n    const selection = await this.getSelection();\n    return await this.getSelectionQuery({\n      viewId: viewId ? selection.viewId : undefined,\n      fieldId: fieldId ? selection.fieldId : undefined,\n      recordId: recordId ? selection.recordId : undefined,\n    });\n  }\n\n  async getRecordList(table: ITable, filter?: IGetRecordsParams) {\n    let pageToken;\n    const records: IRecord[] = [];\n\n    while (true) {\n      const res = await table.getRecords({\n        pageSize: 5000,\n        ...filter,\n        pageToken,\n      });\n      records.push(...res.records);\n      pageToken = res.pageToken;\n      if (!res.hasMore) {\n        break;\n      }\n    }\n\n    return records;\n  }\n\n  async getDisplayRecordList(\n    table: ITable,\n    fields: IFieldMeta[],\n    filter?: IGetRecordsParams\n  ) {\n    const list = await this.getRecordList(table, filter);\n    console.log(\"fields:\", fields);\n\n    const data = [];\n    for (let i = 0; i < list.length; i++) {\n      const item = list[i];\n      data.push({\n        _id: item.recordId,\n        ...transDisplayRecord(fields, item),\n      });\n    }\n\n    return data;\n  }\n}\n","import Parser from \"js-sql-parser\";\n\nexport function sqlFieldReplace(sql: string, replaceMap: Map<string, string>) {\n  const reg = /([^\\s,?= ]+)/gm;\n  return sql.replace(reg, (match, p1) => {\n    const trimmedMatch = match.trim();\n    const replacement = replaceMap.get(trimmedMatch) ?? replaceMap.get(p1);\n    if (\n      !replacement &&\n      trimmedMatch.includes(\"(\") &&\n      trimmedMatch.includes(\")\")\n    ) {\n      return trimmedMatch.replace(/\\((.+)\\)/gm, (match, p1) => {\n        const replacement = replaceMap.get(p1);\n        return `(${replacement || p1})`;\n      });\n    }\n    return replacement || match;\n  });\n}\n\nexport function replaceName(sql: string, replaceMap: Map<string, string>) {\n  replaceMap.forEach((id, name) => {\n    sql = sql.replace(name, id);\n  });\n  return sql;\n}\n\nexport function replaceFieldNames(\n  query: string | any,\n  fieldReplacements: any,\n  tableReplacements: any,\n  extFields?: string[]\n) {\n  const ast = typeof query === \"string\" ? Parser.parse(query) : query;\n\n  // console.log(ast);\n  const tableAliasMap: any = {};\n\n  function traverseTableName(node: any) {\n    if (!node || typeof node !== \"object\") return;\n\n    if (node.type === \"SubQuery\") {\n      // console.log(JSON.stringify(node));\n      node.value = replaceFieldNames(\n        node.value,\n        fieldReplacements,\n        tableReplacements\n      );\n    }\n\n    // 处理表别名\n    if (node.type === \"TableFactor\") {\n      if (node.alias && node.alias.value) {\n        tableAliasMap[node.alias.value] = node.value.value;\n        node.value.value =\n          tableReplacements[extantName(node.value.value)] || node.value.value;\n      } else {\n        tableAliasMap[node.value.value] = node.value.value;\n        node.value.value =\n          tableReplacements[extantName(node.value.value)] || node.value.value;\n      }\n    }\n\n    // 遍历子节点\n    Object.keys(node).forEach((key) => {\n      if (typeof node[key] === \"object\") {\n        traverseTableName(node[key]);\n      }\n    });\n  }\n\n  function traverse(node: any) {\n    if (!node || typeof node !== \"object\") return;\n\n    // 处理表别名\n    if (node.type === \"TableFactor\") {\n      return;\n    }\n\n    // 处理字段名\n    if (node.type === \"Identifier\") {\n      // console.log(node);\n      if (node.value.includes(\".\")) {\n        const [tableAlias, columnName] = node.value.split(\".\");\n        const actualTable = tableAliasMap[tableAlias];\n        const newColumnName =\n          fieldReplacements[actualTable] &&\n          fieldReplacements[actualTable][columnName];\n        // console.log(JSON.stringify({ tableAlias, columnName, actualTable, newColumnName, node }));\n        if (newColumnName) {\n          const tableMap =\n            tableReplacements[extantName(tableAlias)] || tableAlias;\n          node.value = `${tableMap}.${newColumnName}`;\n        }\n      } else {\n        Object.keys(fieldReplacements).some((table) => {\n          const mapTable = tableReplacements[extantName(table)] || table;\n          const newColumnName = fieldReplacements[table][node.value];\n          if (newColumnName) {\n            node.value = `${mapTable}.${newColumnName}`;\n            return true;\n          }\n        });\n      }\n    }\n\n    if (node.type === \"SelectExpr\") {\n      extFields?.forEach((field) => {\n        node.value.push({\n          type: \"Identifier\",\n          value: field,\n          alias: null,\n          hasAs: null,\n        });\n      });\n    }\n\n    // 遍历子节点\n    Object.keys(node).forEach((key) => {\n      if (typeof node[key] === \"object\") {\n        traverse(node[key]);\n      }\n    });\n  }\n\n  traverseTableName(ast);\n  // console.log(JSON.stringify(ast));\n  traverse(ast);\n\n  Object.defineProperty(ast, \"toString\", {\n    value: () => Parser.stringify(ast),\n  });\n\n  return ast;\n}\n\nexport function mapToObj(map: Map<string, any>) {\n  const obj: any = {};\n  map.forEach((v, k) => {\n    obj[k] = v;\n  });\n  return obj;\n}\n\nexport function extantName(name: string) {\n  if (name.startsWith(\"`\") && name.endsWith(\"`\")) {\n    return name.substring(1, name.length - 1);\n  }\n  return name;\n}\n","import { ITable } from \"@lark-base-open/js-sdk\";\nimport { BsSdk } from \"../bs-sdk/BsSdk\";\nimport { Emitter } from \"../bs-sdk/Emitter\";\nimport alasql from \"alasql\";\nimport { transFieldsMap } from \"../bs-sdk/shared\";\nimport { mapToObj, replaceFieldNames } from \"./shared\";\n\nexport type TableListCtx = {\n  tableMap: Map<string, ITable>;\n  tableIdMapName: Map<string, string>;\n  tableNameMapId: Map<string, string>;\n  tableList: ITable[];\n};\n\nexport class BsSql {\n  public emFetchTableList = new Emitter<(data: TableListCtx) => any>();\n  public emFetchTableListFields = new Emitter<(data: any) => any>();\n\n  constructor(private sdk: BsSdk) {\n    this.fetchTables();\n  }\n\n  async fetchTables() {\n    const tableMap = new Map<string, ITable>();\n    const tableNameMapId = new Map<string, string>();\n    const tableIdMapName = new Map<string, string>();\n    const tableList = await this.sdk.getTableList();\n\n    tableList.map((item) => tableMap.set(item.id, item));\n\n    const nameMapIds: { name: string; id: string }[] = [];\n    await Promise.all(\n      tableList.map(async (item) => {\n        const name = await item.getName();\n        nameMapIds.push({\n          name,\n          id: item.id,\n        });\n      })\n    );\n\n    // 按名字从长到短排序\n    nameMapIds\n      .sort((a, b) => b.name.length - a.name.length)\n      .forEach((item) => {\n        tableNameMapId.set(item.name, item.id);\n        tableIdMapName.set(item.id, item.name);\n      });\n\n    this.emFetchTableList.emitLifeCycle({\n      tableMap,\n      tableIdMapName,\n      tableNameMapId,\n      tableList,\n    });\n  }\n\n  extractName(sql: string, ids: string[]) {\n    const selectTablesId: string[] = [];\n    ids.forEach((id) => {\n      if (sql.includes(id)) {\n        selectTablesId.push(id);\n      }\n    });\n    return selectTablesId;\n  }\n  async query(sql: string) {\n    const activeId = (await this.sdk.getActiveTable()).id;\n    const [tableListCtx] = await this.emFetchTableList.wait();\n    sql = sql.replace(/FROM\\s+(\\?)\\s?/gim, `FROM ${activeId} `);\n    console.log(\"1sql:\", sql);\n\n    sql =\n      replaceFieldNames(sql, {}, mapToObj(tableListCtx.tableNameMapId)) + \"\";\n    console.log(\"sql:\", sql);\n    const selectTablesId: string[] = this.extractName(\n      sql,\n      Array.from(tableListCtx.tableNameMapId.values())\n    );\n\n    console.log(\"tableListCtx:\", tableListCtx);\n\n    console.log(\"selectTablesId:\", selectTablesId);\n\n    const transFields: any = {};\n\n    const tableMapFields = new Map<\n      string,\n      {\n        fieldsMapName: any;\n        fieldsMapId: any;\n      }\n    >();\n    const tables = (alasql as any).tables;\n    await Promise.all(\n      selectTablesId.map(async (id) => {\n        const table = tableListCtx.tableMap.get(id) as ITable;\n        const records = await this.sdk.getRecordList(table);\n        const fields = await table.getFieldMetaList();\n        const data = await this.sdk.getDisplayRecordList(table, fields);\n        const t = transFieldsMap(fields);\n\n        transFields[id] = t.fieldsMapName;\n\n        tableMapFields.set(id, t);\n\n        console.log(\"selectTables:\", table, records, data);\n        tables[id] = { data };\n      })\n    );\n\n    this.emFetchTableListFields.emitLifeCycle(tableMapFields);\n\n    sql = replaceFieldNames(sql, transFields, {}, [\"_id\"]) + \"\";\n\n    console.log(\"res:\", sql, transFields);\n\n    return alasql(sql);\n  }\n}\n","export * from \"./BsSql\";\n","import { useCallback, useState } from \"react\";\nimport { BsSdk } from \"../libs/bs-sdk/BsSdk\";\nimport { BsSql } from \"../libs/bs-sql\";\n\nconst bsSdk = new BsSdk({});\nconst bsSQL = new BsSql(bsSdk);\n\nexport function useQuery() {\n  const [result, setResult] = useState<any>();\n  const [error, setError] = useState<any>();\n  const [columns, setColumns] = useState<any>();\n  const [pageSize, setPageSize] = useState<any>();\n  const [total, setTotal] = useState<any>();\n\n  const exec = useCallback(\n    async (sql: string, pageIndex: number, reset?: boolean) => {\n      const result = await bsSQL.query(sql);\n      const [tableListCtx] = await bsSQL.emFetchTableList.wait();\n      const [tableFields] = await bsSQL.emFetchTableListFields.wait();\n      const fieldIdMapName = new Map<string, string>();\n      tableFields.forEach((t: any) => {\n        Object.keys(t.fieldsMapId).forEach((id) => {\n          fieldIdMapName.set(id, t.fieldsMapId[id]);\n        });\n      });\n      const columns = Object.keys(result[0] || {})\n        .filter((item) => ![\"_id\", \"_raw_\"].includes(item))\n        .map((id) => {\n          return {\n            title: fieldIdMapName.get(id) || id,\n            width: 100,\n            dataIndex: id,\n            key: id,\n          };\n        });\n      return {\n        tableName: await tableListCtx.tableList[0].getName(),\n        columns,\n        result,\n        total,\n        pageSize,\n      };\n    },\n    []\n  );\n\n  const onExec = useCallback(\n    async (sql: string, pageIndex: number, reset?: boolean) => {\n      // console.log(\"onExec\", sql, pageIndex);\n      setError(\"\");\n      try {\n        const { columns, result, total, pageSize } = await exec(\n          sql,\n          pageIndex,\n          reset\n        );\n        setTotal(total);\n        setPageSize(pageSize);\n        setColumns(columns);\n        setResult(result);\n      } catch (error) {\n        console.error(error);\n        setError(String(error));\n      }\n    },\n    [exec]\n  );\n\n  return {\n    result,\n    error,\n    columns,\n    exec,\n    onExec,\n    pageSize,\n    setPageSize,\n    total,\n  };\n}\n","import { Banner, Button, Col, Dropdown, Form, Input, Progress, Row, Spin, Table, Toast } from \"@douyinfe/semi-ui\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { PermissionEntity, OperationType, bitable, IFieldMeta, ITableMeta } from \"@lark-base-open/js-sdk\";\nimport styles from \"./index.module.css\";\nimport { useQuery } from \"../../utils/useQuery\";\nimport { ColumnProps, TablePagination } from \"@douyinfe/semi-ui/lib/es/table\";\nimport Icon, { IconAscend, IconExport, IconGithubLogo, IconLink } from \"@douyinfe/semi-icons\";\nimport type { TableColumnProperties } from \"exceljs\";\nimport { message } from \"antd\";\nimport { TFunction } from \"i18next\";\nimport { useTranslation } from \"react-i18next\";\n\n// 定义 Text2SQL 输入接口信息\ninterface Column {\n  name: string;\n  type: string;\n  is_primary: boolean;\n}\n\ninterface Tables {\n  name: string;\n  columns: Column[];\n}\n\ninterface DbMetadata {\n  db_id: string;\n  tables: Tables[];\n}\n\ninterface RequestPayload {\n  request_id: string;\n  query: string;\n  external_knowledge: string[];\n  model: string;\n  stream: boolean;\n  use_explanation: boolean;\n  use_fallback: boolean;\n  use_validator: boolean;\n  db_metadata: DbMetadata;\n}\n\n// 提取db schema information\nasync function getMeta(params: { t: TFunction<\"translation\", undefined> }) {\n  const { t } = params;\n  const { tableId } = await bitable.base.getSelection();\n  if (!tableId) {\n    message.error(t('获取数据表为空'));\n    throw new Error('获取数据表错误');\n  }\n  const table = await bitable.base.getTableById(tableId);\n  const fieldMetaList = await table.getFieldMetaList();\n  const tableMeta = await table.getMeta();\n  const tableMetaList = await bitable.base.getTableMetaList();\n\n  return {\n    tableMeta,\n    tableMetaList,\n    fieldMetaList,\n  };\n}\n\nfunction downloadBufferAsFile(buffer: ArrayBuffer, fileName: string) {\n  // 创建一个新的 Blob 对象，将 buffer 数据放入其中\n  const blob = new Blob([buffer]);\n\n  // 创建一个 URL 对象，用于生成下载链接\n  const url = URL.createObjectURL(blob);\n\n  // 打开下载链接\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = fileName;\n  link.style.display = \"none\";\n  document.body.appendChild(link);\n  link.click();\n\n  // 清理资源\n  URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n}\n\nfunction tableToMatrix(\n  columns: ColumnProps<any>[],\n  data: any[]\n): [TableColumnProperties[], any[]] {\n  const tdata: any[] = [];\n  const tcolumns: TableColumnProperties[] = columns.map(\n    (c) =>\n    ({\n      name: c.title,\n    } as TableColumnProperties)\n  );\n  for (let i = 0; i < data.length; i++) {\n    const d: any = data[i];\n    const row = [];\n    for (let j = 0; j < columns.length; j++) {\n      const c = columns[j];\n      const k = c.key as any;\n      row.push(d[k]);\n    }\n    tdata.push(row);\n  }\n\n  return [tcolumns, tdata];\n}\n\nasync function exportXls(\n  filename: string,\n  columns: TableColumnProperties[],\n  rows: any[]\n) {\n  const ExcelJS = await import(\"exceljs/dist/exceljs\");\n  const workbook = new ExcelJS.Workbook();\n  const worksheet = workbook.addWorksheet(\"Sheet1\");\n  // 将表格添加到工作表\n  worksheet.addTable({\n    name: \"Sheet1\",\n    ref: \"A1\",\n    headerRow: true,\n    totalsRow: false,\n    style: {\n      // theme: \"TableStyleDark3\",\n      showRowStripes: true,\n      showFirstColumn: true,\n    },\n    columns,\n    rows,\n    // columns: [{ name: \"Id\" }, { name: \"Name\" }, { name: \"D.O.B.\" }],\n    // rows: [\n    //   [6, \"Barbara\", new Date()],\n    //   [6, \"Barbara\", new Date()],\n    //   [6, \"Barbara\", new Date()],\n    // ],\n  });\n\n  worksheet.columns.forEach((item) => (item.width = 10));\n\n  // add new rows and return them as array of row objects\n  const buf = await workbook.xlsx.writeBuffer();\n  downloadBufferAsFile(buf, filename);\n}\n\nexport default function App() {\n  const [sql, setSql] = useState('');\n  const [query, setQuery] = useState<string>(\"查询所有数据\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const { t } = useTranslation();\n  const input = useRef('');\n  // const [loading, setLoading] = useState(false);\n  const [result_sql, setResult] = useState('');\n  const baseInfo = useRef<{\n    tableMeta: ITableMeta;\n    tableMetaList: ITableMeta[];\n    fieldMetaList: IFieldMeta[];\n  }>();\n\n  // 获取线上db信息\n  const getInfo = async () => {\n    const info = await getMeta({ t });\n    baseInfo.current = info;\n    return info;\n  };\n\n  const {\n    exec,\n    onExec,\n    error,\n    pageSize = 0,\n    total = 0,\n    columns,\n    result,\n  } = useQuery();\n  const [loading, setLoading] = useState(false);\n  const onChange = useCallback((val: string) => setQuery(val), []);\n  const onQuery = useCallback(async () => {\n    if (loading) {\n      Toast.warning({\n        content: \"querying...\",\n      });\n      return;\n    }\n    setLoading(true);\n    setCurrentPage(1);\n    const info = await getInfo();\n\n    // TODO: type暂时还没有进行额外映射，后续处理\n    const columns = info.fieldMetaList.map(item => ({\n      name: item.name,\n      type: \"TEXT\",\n      is_primary: item.isPrimary\n    }));\n\n    const requestData: RequestPayload = {\n      request_id: \"\",\n      query: query,\n      external_knowledge: [],\n      model: \"lab-sql-optimized-20240426\",\n      stream: false,\n      use_explanation: true,\n      use_fallback: false,\n      use_validator: false,\n      db_metadata: {\n        db_id: \"\",\n        tables: [\n          {\n            name: info.tableMeta.name,\n            columns: columns\n          }\n        ]\n      }\n    };\n\n    const data = await callApi(requestData);\n    // 前端输出返回结果\n    const sql = String(data.sql)\n    setSql(sql);\n    console.log(\"调用bytebrain nl2sql, 生成sql为:\", sql)\n    await onExec(sql, -1, true);\n    setLoading(false);\n  }, [loading, onExec, query]);\n\n  const pagination: TablePagination =\n    pageSize >= total\n      ? false\n      : {\n        currentPage: currentPage,\n        size: \"small\",\n        pageSize,\n        total,\n        position: \"top\",\n        hideOnSinglePage: true,\n        formatPageText: (p) =>\n          `当前 SQL 查询的是 ${p?.currentStart}条 到 ${p?.currentEnd}条 的数据`,\n        onPageChange: async (page: number) => {\n          // console.log(\"onPageChange\", page);\n          setLoading(true);\n          setCurrentPage(page);\n          await onExec(sql, page - 1, false);\n          setLoading(false);\n        },\n      };\n  const [exportLoading, setExportLoading] = useState(false);\n  const onExport = useCallback(async () => {\n    const bool = await bitable.base.getPermission({\n      entity: PermissionEntity.Base,\n      type: OperationType.Printable,\n    });\n    if (!bool) {\n      Toast.warning({\n        content: \"no permission\",\n      });\n      return;\n    }\n    if (exportLoading) {\n      Toast.warning({\n        content: \"exporting...\",\n      });\n      return;\n    }\n    setExportLoading(true);\n    try {\n      const res = await exec(query, -1);\n      // console.log(res);\n      exportXls(\n        res.tableName + \".xlsx\",\n        ...tableToMatrix(res.columns, res.result)\n      );\n    } catch (error) {\n      console.error(error);\n      Toast.error({\n        content: `export error: ${error}`,\n      });\n    }\n    setExportLoading(false);\n  }, [exec, exportLoading, query]);\n  const onHelp = useCallback(() => {\n    window.open(\"http://sqlmother.yupi.icu/#/learn\");\n  }, []);\n  const onGithub = useCallback(() => {\n    window.open(\"https://github.com/WumaCoder/bs-sql\");\n  }, []);\n  return (\n    <main className={styles.main}>\n      <Row style={{ padding: \"0.5rem\" }}>\n        <Col span={18}>\n          <Input defaultValue={query} onChange={onChange}></Input>\n        </Col>\n        <Col span={4} style={{ paddingLeft: \"5px\" }}>\n          <Button type=\"primary\" block theme=\"solid\" onClick={onQuery}>\n            Query\n          </Button>\n        </Col>\n        <Col span={2} style={{ paddingLeft: \"5px\" }}>\n          <Dropdown\n            trigger={\"click\"}\n            position={\"bottomRight\"}\n            render={\n              <Dropdown.Menu>\n                {(<><Dropdown.Item\n                  icon={exportLoading ? <Spin /> : <IconExport />}\n                  onClick={onExport}\n                >\n                  Export\n                </Dropdown.Item>\n                <Dropdown.Item icon={<IconLink />} onClick={onHelp}>\n                  Help\n                </Dropdown.Item>\n                <Dropdown.Item icon={<IconGithubLogo />} onClick={onGithub}>\n                  Github\n                </Dropdown.Item></>) as any}\n              </Dropdown.Menu>\n            }\n          >\n            <Button icon={<IconAscend />}></Button>\n          </Dropdown>\n        </Col>\n      </Row>\n      {error && (\n        <div style={{ margin: \"0px 0.5rem\" }}>\n          <Banner\n            fullMode={false}\n            type=\"warning\"\n            bordered\n            description={\n              <p\n                style={{\n                  whiteSpace: \"pre-wrap\",\n                  color: \"red\",\n                  wordSpacing: \"0.5em\",\n                }}\n              >\n                {error}\n              </p>\n            }\n          ></Banner>\n        </div>\n      )}\n      {sql ? <Row style={{ margin: \"0.6rem\", padding: '0.5rem', fontSize: '14px', border: '1px solid', whiteSpace: 'pre-wrap' }}>{sql}</Row> : null}\n      <div>\n        <Table\n          columns={columns}\n          dataSource={result}\n          pagination={pagination}\n          loading={loading}\n        />\n      </div>\n    </main>\n  );\n}\n\nconst callApi = async (payload: RequestPayload) => {\n  try {\n    console.log(\"输入数据,\", JSON.stringify(payload))\n    const response = await fetch('https://bytebrain.bytedance.net/openapi/lark/text2sql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload),\n      // mode: 'no-cors', // 添加这一行\n    });\n    const text = await response.json()\n    console.log(\"输出数据,\", text)\n    return text;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__hJIzP\",\"h4\":\"App_h4__VmZi6\",\"code\":\"App_code__MlZfd\"};"],"names":["Emitter","size","events","emitSync","_len","arguments","length","args","_key","p","forEach","push","cb","emitLifeCycle","lastEmitArgs","Promise","resolve","then","error","reject","emit","on","add","off","wait","clear","delete","destroy","constructor","Set","replaceFieldNames","query","fieldReplacements","tableReplacements","extFields","ast","Parser","tableAliasMap","traverseTableName","node","type","value","alias","extantName","Object","keys","key","traverse","includes","tableAlias","columnName","split","actualTable","newColumnName","tableMap","concat","some","mapTable","table","field","hasAs","defineProperty","name","startsWith","endsWith","substring","bsSdk","getRecordIds","getActiveTable","getRecordIdList","getRecordById","recordId","activeTable","bitable","base","getTableList","getFieldList","fieldList","i","getName","getSelection","getSelectionQuery","selection","tableId","getTableById","undefined","result","view","viewId","getViewById","fieldId","getFieldById","record","getSelection2","getRecordList","filter","pageToken","records","res","getRecords","pageSize","hasMore","getDisplayRecordList","fields","list","console","log","data","item","_id","transDisplayRecord","obj","cell","id","FieldType","DateTime","property","format","dateFormat","Url","link","text","map","join","_raw_","onSelectionChange","immediatelySelectionChange","emSelectionChange","event","bsSQL","fetchTables","Map","tableNameMapId","tableIdMapName","tableList","sdk","set","nameMapIds","all","sort","a","b","emFetchTableList","extractName","sql","ids","selectTablesId","activeId","tableListCtx","replace","mapToObj","v","k","Array","from","values","transFields","tableMapFields","tables","get","getFieldMetaList","t","transFieldsMap","fieldsMapName","fieldsMapId","emFetchTableListFields","alasql","getMeta","params","message","fieldMetaList","tableMeta","tableMetaList","getTableMetaList","exportXls","filename","columns","rows","ExcelJS","__webpack_require__","e","bind","workbook","Workbook","worksheet","addWorksheet","addTable","ref","headerRow","totalsRow","style","showRowStripes","showFirstColumn","width","buf","xlsx","writeBuffer","downloadBufferAsFile","buffer","fileName","blob","Blob","url","URL","createObjectURL","document","createElement","href","download","display","body","appendChild","click","revokeObjectURL","removeChild","App","setSql","useState","setQuery","currentPage","setCurrentPage","useTranslation","useRef","result_sql","setResult","baseInfo","getInfo","info","current","exec","onExec","total","useQuery","setError","setColumns","setPageSize","setTotal","useCallback","pageIndex","reset","tableFields","fieldIdMapName","title","dataIndex","tableName","String","loading","setLoading","onChange","val","onQuery","Toast","warning","content","is_primary","isPrimary","requestData","request_id","external_knowledge","model","stream","use_explanation","use_fallback","use_validator","db_metadata","db_id","callApi","pagination","position","hideOnSinglePage","formatPageText","currentStart","currentEnd","onPageChange","page","exportLoading","setExportLoading","onExport","bool","getPermission","entity","PermissionEntity","Base","OperationType","Printable","tableToMatrix","tdata","tcolumns","c","d","row","j","onHelp","window","open","onGithub","jsx_runtime","jsxs","main","className","styles","Row","padding","jsx","Col","span","Input","defaultValue","paddingLeft","Button","block","theme","onClick","Dropdown","trigger","render","Menu","Fragment","Item","icon","Spin","IconExport","IconLink","IconGithubLogo","IconAscend","div","margin","Banner","fullMode","bordered","description","whiteSpace","color","wordSpacing","fontSize","border","Table","dataSource","payload","JSON","stringify","response","fetch","method","headers","json","module","exports"],"sourceRoot":""}